quit
n
s[i]
n
s[i]
n
num_occurred
num_occured
str
s[i]
n
s[i]
quit
consec_nums
n
s.split
n
quit
n
count
n
count
n
s[i]
count
n
quit
n
count
n
count
n
s.split ' '
quit
str
s.split(/[0-9]/)
s.split(/[a-zA-Z]/)
s
str
s.split(/[a-zA-Z]/).select { |elem| elem.length > 0 }
s.split(/[a-zA-Z]/).select { |elem| elem.length > 0 }.count
s
n
str[i..idx - 1]
n
str[i]
str
str[i]
n
str
str[i]
n
str
str[i]
n
quit
str.length
idx
str[idx]
idx
str[i..idx - 1]
n
str
str[i]
n
str
str[i]
n
str
str[i]
n
str
str[i]
n
str
str[i]
n
str
str[i]
n
str[i]
n
str
str[i]
n
str
str[i]
n
str
str[i]
n
str[i]
n
str
str[i]
quit
n
str[i..idx - 1]
str[i..idx]
idx
n
str[i]
n
str
str[i]
n
quit
n
    return true if str[i..idx - 1].chars.select { |elem| elem.to_i.even? }.count >= 2
    idx += 1 until str[i] =~ /[a-zA-Z]/
    next unless str[i] =~ /[0-9]/
    idx = i
  until i >= str.length - 1 do
  i = 0
quit 
char
n
str[idx..i - 1]
idx
char
n
char
idx
n
char
idx
n
char
str
idx
n
idx
quit
idx
str.chars
str
idx
str[idx..i - 1]
char
n
str
char
n
char
n
quit
str[i..idx]
n
char
n
quit
str[idx..i]
n
char
n
str
char
n
str
n
char
str
n
even_count
n
str[i]
n
str[i]
n
even_count
n
str[i]
n
str
str[i]
n
str[i]
n
str
str[i]
n
quit
n
str
str[i]
n
str
str[i]
n
even_count
n
str[i]
n
str[i]
n
str
n
even_count
n
str[i]
n
even_count
n
even_count
n
str
n
str
quit
even_count
n
str
str[i]
n
quit
n
str
str[i]
n
str
str[i]
n
str[i]
n
even_count
n
str[i]
n
even_count
str[i]
n
str[i]
n
even_count
n
quit
str
n
even_count
str[i]
n
str[i]
n
str
str[i]
n
str[i]
n
str
str[i]
n
even_count
str[i]
n
str[i]
n
