continue
possibilities
n
continue
list.combination(k).to_a.map{|elem| elem.reduce(:+)}
possibilities
continue
possibilities[25]
possibilities.map{|elem| (t - elem).abs}.each_with_index.min
possibilities.map{|elem| (t - elem).abs}.min.index
possibilities.map{|elem| (t - elem).abs}.min
possibilities.map{|elem| (t - elem).abs}
possibilities.count
list.combination(k).to_a.count
list.combination(k).to_a
possibilities
n
continue
-1.abs
Math.abs(-1)
possibilities
quit
hash
possibilities.map{|elem| t - (elem.reduce(:+))}
possibilities.map{|elem| t - (elem.reduce(:+))}.max
possibilities
n
possibilities
list
k
t
continue
hash
arr
n
quit
hash
n
hash
n
arr
quit
[1,1,2,3].permutation.to_a.count
[1,1,2,3].permutation.to_a
['a','a','b','c'].combination(4).to_a.count
['a','a','b','c'].permutation(4).to_a.count
['a','a','b','c'].permutation(4).to_a
'aabc'.permutation(4)
perm_arr.flatten.permutation(4).to_a.count
perm_arr.flatten.length
perm_arr
perm_arr.length
perm_arr.flatten.permutation(4).to_a
perm_arr.flatten.permutation(perm_arr.length).to_a
perm_arr.flatten
perm_arr
n
hash
quit
n
result
n
arr
n
arr
n
result
n
arr
n
e
arr
n
result
e
n
result
e
arr
n
arr
quit
result
e
arr
n
arr
n
arr
n
result
arr
n
result
e
next
arr
e
quit
result
arr
e
n
arr
n
result 
arr
n
e
n
arr
n
result 
n
arr
n
e
n
arr
quit
continue
result
arr
n
result
arr
n
arr
n
perm
arr
n
perm
n
arr
perm
e
n
e
quit
e
next
n
continue
max
n
new_arr
n
max
n
continue
n
continue
n
max
n
arr
n
next
max
next
arr
next
max
next
continue
max
next
arr
next
new_arr
next
arr.reject {|elem| elem == max}
new_arr
next
max
next
arr
continue
end
n
record
n
data
n
norm_town
n
params
