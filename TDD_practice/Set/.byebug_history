quit
quit 
quit
setB == setA
setA == setB
setB
setA
quit
setA == setB
setB
setA
quit
setB
setA
quit
<<<<<<< HEAD
complement
other
self
quit
setC
quit
4.downto(1) do |t| puts t end
setC
quit
n
self - complement
other
self
complement
=======
match? a,e
e
a
other_obj
self_obj
quit
other_obj
self_obj
a
e
quit
e
a 
other_obj.set.any? {|e| match? a,e}
match?([1,2], other_obj.set)
match?([1,2], other_set.set)
self_obj.set
other_obj.set
a
elem
n
self_obj.intersection other_obj
setA.intersection setB
other_obj
self_obj
method
quit
setA.intersection setB
quit
setC.set
setC
quit
setC
quit
setC
quit
setC
>>>>>>> a8f8bf30b5e77922d18b6d429c6a7da76f6ef347
quit
setB
setA
quit 
quit
setA.union setB
setA union setB
quit
resultant_set
quit
resultant_set
quit
resultant_set
quit
resultant_set
self.set
other.set
quit
other.set
self.set
resultant_set
quit
other.set
self.set
result
quit
set
new_set
quit
@set
quit
@set
set
obj
setA
quit
arrayA
n
setB
setA
quit
arrayA
n
quit
arrayB
arrayA
n
quit
n
setA
quit
setB
setA
quit
setB.set
setA.set
quit
setB.set
setA.set
setA
n
quit
n
arrayB
arrayA
index
n
quit
setA == setB
setB
setA
quit
index
n
index
n
arrayB
arrayA
index
n
quit
index
n
quit
n
index
n
arrayB
array
arrayA
n
quit
n
setB.set
setA.set
setA.set == setB.set
setA.set
setA
setA == setB
quit
setA == setB
quit
setA == setB
quit
setA == setB
quit
n
nn
n
check
n
objB
objA
check
n
check
n
check
n
check
n
quit
end
n
objA
n
objB
n
objA
n
objA
n
objA
n
objA
n
objB
objA
a
n
a
objB
objA
n
objA.is_a?(Array)
n
quit
setA == setB
setB
setA
quit
setA == setB
setA
setB
n
quit
setA == setB
setA
setB
n
quit
objA
n
index
n
objB
objA
n
objB
objA
quit
objA
n
index
n
index
n
objA
index
n
objB.is_a?(Array)
objB
objA
a
index
n
quit
